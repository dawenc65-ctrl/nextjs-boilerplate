// app/api/webhook/route.ts
export async function POST(request: Request) {
  try {
    // 1. 从请求中获取JSON数据
    const data = await request.json();

    // 2. 【极其重要】安全验证！检查令牌是否匹配
    const secretToken = process.env.SECRET_TOKEN;
    if (data.token !== secretToken) {
      console.error('Unauthorized request. Token received:', data.token);
      // 返回 401 未授权错误
      return Response.json({ error: 'Unauthorized' }, { status: 401 });
    }

    // 3. 提取TradingView发送的数据 (这些字段需要和您在TradingView警报中设置的JSON键名匹配)
    const { symbol, price, time, action, message } = data;

    // 4. 核心逻辑：打印日志
    console.log('✅ Webhook Received:', { symbol, price, time, action });

    // 5. 这里添加您的处理逻辑，例如发送到Telegram、调用模型、或执行交易
    if (action) {
      // 这是一个示例函数，您需要实现自己的逻辑
      await processTradingSignal(symbol, price, action, message);
    }

    // 6. 返回成功的响应给TradingView
    return Response.json({ status: 'success', message: 'Signal received and processed.' });

  } catch (error) {
    // 捕获任何意外错误
    console.error('❌ Error processing webhook:', error);
    return Response.json({ error: 'Internal Server Error' }, { status: 500 });
  }
}

// 辅助函数：处理交易信号（示例：发送到Telegram）
async function processTradingSignal(symbol: string, price: number, action: string, message?: string) {
  // 您的逻辑在这里
  console.log(🤖 Processing ${action} signal for ${symbol} at ${price});

  // 示例：发送到Telegram (需要配置环境变量)
  const botToken = process.env.TELEGRAM_BOT_TOKEN;
  const chatId = process.env.TELEGRAM_CHAT_ID;

  if (botToken && chatId) {
    const text = `🚀 TradingView Alert \\- ${action}
    \\- Symbol: ${symbol}
    \\- Price: ${price}
    \\- Message: ${message || 'No additional message'}`;

    const telegramUrl = https://api.telegram.org/bot${botToken}/sendMessage;

    try {
      const response = await fetch(telegramUrl, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          chat_id: chatId,
          text: text,
          parse_mode: 'MarkdownV2',
        }),
      });
      const data = await response.json();
      console.log('Telegram message sent:', data.ok);
    } catch (tgError) {
      console.error('Failed to send Telegram message:', tgError);
    }
  }
}

// 可选：同样允许GET请求用于测试，但TradingView只会用POST
export async function GET() {
  return Response.json({ message: 'Webhook endpoint is live and ready for POST requests from TradingView!' });
}
